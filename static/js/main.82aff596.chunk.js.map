{"version":3,"sources":["components/NewPost/NewPost.module.css","containers/Blog/Blog.module.css","axios.js","components/Post/Post.js","components/FullPost/FullPost.js","components/NewPost/NewPost.js","containers/Blog/Blog.js","App.js","registerServiceWorker.js","index.js","components/FullPost/FullPost.module.css","components/Post/Post.module.css"],"names":["module","exports","instance","axios","create","baseURL","defaults","headers","common","post","props","className","classes","Post","onClick","clicked","title","Info","Author","author","FullPost","state","loadedPost","deletePostHandler","delete","id","then","response","console","log","this","get","setState","data","style","textAlign","body","Edit","Delete","Component","NewPost","content","postDataHandler","type","value","onChange","event","target","rows","Blog","posts","selectedPostId","error","postSelectedHandler","updatedPosts","slice","map","catch","Posts","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","Axios","interceptors","request","use","Promise","reject","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.82aff596.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"NewPost\":\"NewPost_NewPost__2TNaZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Posts\":\"Blog_Posts__2fAOm\"};","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com'\r\n});\r\n\r\ninstance.defaults.headers.common['Authorization'] = 'AUTH TOKEN FROM INSTANCE';\r\n\r\nexport default instance;","import React from 'react';\r\n\r\nimport classes from './Post.module.css';\r\n\r\nconst post = (props) => (\r\n    <article className={classes.Post} onClick={props.clicked}>\r\n        <h1>{props.title}</h1>\r\n        <div className={classes.Info}>\r\n            <div className={classes.Author}>{props.author}</div>\r\n        </div>\r\n    </article>\r\n);\r\n\r\nexport default post;","import React, { Component } from 'react';\r\n\r\nimport './FullPost.module.css';\r\nimport classes from './FullPost.module.css';\r\nimport axios from 'axios';\r\n\r\nclass FullPost extends Component {\r\n\r\n    state = {\r\n        loadedPost: null\r\n    }\r\n\r\n    componentDidUpdate () {\r\n        if (this.props.id) {\r\n            if (!this.state.loadedPost || (this.state.loadedPost && this.state.loadedPost.id !== this.props.id)) {\r\n                axios.get('/posts/' + this.props.id)\r\n                .then(response => {\r\n                    this.setState({loadedPost: response.data});\r\n                    // console.log(response)\r\n                })\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    deletePostHandler = () => {\r\n        axios.delete('/posts/' + this.props.id)\r\n            .then(response => {\r\n                console.log(response);\r\n            });\r\n    }\r\n\r\n    render () {\r\n        let post = <p style={{textAlign: 'center'}} >Please select a Post!</p>;\r\n        if (this.props.id) {\r\n            post = <p style={{textAlign: 'center'}}> Loading...!</p>;\r\n        }\r\n        if (this.state.loadedPost) {\r\n            post = (\r\n                <div className={classes.FullPost}>\r\n                    <h1>{this.state.loadedPost.title}</h1>\r\n                    <p>{this.state.loadedPost.body}</p>\r\n                    <div className={classes.Edit}>\r\n                        <button className={classes.Delete} onClick={this.deletePostHandler}>Delete</button>\r\n                    </div>\r\n                </div>\r\n    \r\n            );\r\n        }\r\n        \r\n        return post;\r\n    }\r\n}\r\n\r\nexport default FullPost;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport classes from './NewPost.module.css';\r\n\r\nclass NewPost extends Component {\r\n    state = {\r\n        title: '',\r\n        content: '',\r\n        author: 'Max'\r\n    }\r\n\r\n    postDataHandler = () => {\r\n        const data = { \r\n            title: this.state.title,\r\n            body: this.state.content,\r\n            author: this.state.author\r\n        };\r\n        axios.post('/posts', data)\r\n            .then(response => {\r\n                console.log(response);\r\n            });\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div  className={classes.NewPost}>\r\n                <h1>Add a Post</h1>\r\n                <label>Title</label>\r\n                <input type=\"text\" value={this.state.title} onChange={(event) => this.setState({title: event.target.value})} />\r\n                <label>Content</label>\r\n                <textarea rows=\"4\" value={this.state.content} onChange={(event) => this.setState({content: event.target.value})} />\r\n                <label>Author</label>\r\n                <select value={this.state.author} onChange={(event) => this.setState({author: event.target.value})}>\r\n                    <option value=\"Max\">Max</option>\r\n                    <option value=\"Manu\">Manu</option>\r\n                </select>\r\n                <button onClick={this.postDataHandler}>Add Post</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewPost;","import React, { Component } from 'react';\r\n// import axios from 'axios';\r\nimport axios from '../../axios';\r\nimport Post from '../../components/Post/Post';\r\nimport FullPost from '../../components/FullPost/FullPost';\r\nimport NewPost from '../../components/NewPost/NewPost';\r\nimport classes from './Blog.module.css';\r\n\r\nclass Blog extends Component {\r\n\r\n    state = {\r\n        posts: [],\r\n        selectedPostId: null,\r\n        error: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('/posts')\r\n            .then(response => {\r\n                const posts = response.data.slice(0,4);\r\n                const updatedPosts = posts.map(post => {\r\n                    return {\r\n                        ...post,\r\n                        author: 'Edwin'\r\n                    }\r\n                })\r\n                this.setState({posts: updatedPosts});\r\n                // console.log(response);\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                this.setState({error: true})\r\n            });\r\n    }\r\n\r\n    postSelectedHandler = (id) => {\r\n        this.setState({selectedPostId: id});\r\n    }\r\n\r\n    render () {\r\n        let posts = <p style={{textAlign: 'center'}}>Something went wrong!</p>\r\n\r\n        if(!this.state.error) {\r\n            posts = this.state.posts.map(post => {\r\n                return <Post \r\n                            key={post.id}\r\n                            title={post.title}\r\n                            author={post.author} \r\n                            clicked={() => this.postSelectedHandler(post.id)}/>\r\n            });\r\n        }\r\n        \r\n        \r\n\r\n        return (\r\n            <div>\r\n                <section className={classes.Posts}>\r\n                    {posts}\r\n                </section>\r\n                <section>\r\n                    <FullPost id={this.state.selectedPostId} />\r\n                </section>\r\n                <section>\r\n                    <NewPost />\r\n                </section>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Blog;","import React, { Component } from 'react';\n\nimport Blog from './containers/Blog/Blog';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Blog />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport axios from 'axios';\nimport Axios from 'axios';\n\n// axios.defaults.baseURL = 'https://jsonplaceholder.typicode.com';\n// axios.defaults.headers.common['Authorization'] = 'AUTH TOKEN';\nAxios.defaults.headers.post['Content-Type'] = 'application/json'\n\naxios.interceptors.request.use(request => {\n    console.log(request);\n    return request;\n}, error => {\n    console.log(error);\n    return Promise.reject(error);\n});\n\naxios.interceptors.response.use(response => {\n    console.log(response);\n    return response;\n}, error => {\n    console.log(error);\n    return Promise.reject(error);\n});\n\nReactDOM.render( <App />, document.getElementById( 'root' ) );\nregisterServiceWorker();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FullPost\":\"FullPost_FullPost__1d-ZZ\",\"Edit\":\"FullPost_Edit__3Iyg-\",\"Delete\":\"FullPost_Delete__2TN5y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Post\":\"Post_Post__3C_ZM\",\"Author\":\"Post_Author__2tOy_\"};"],"sourceRoot":""}